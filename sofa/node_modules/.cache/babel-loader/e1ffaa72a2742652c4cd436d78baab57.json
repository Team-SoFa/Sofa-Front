{"ast":null,"code":"var _jsxFileName = \"/Users/mingmaengmung/Documents/GitHub/Sofa-Front/sofa/src/components/LinkCard/ShowLinkCard.js\";\n// BookmarkList.js\n\nimport React, { useState, useEffect } from \"react\";\nimport LinkCard from \"./LinkCard.js\";\nimport \"./ShowLinkCard.css\";\n\n//bookmarks : 북마크 데이터 배열(id, title, url 포함)\n//onDelete : 북마크 삭제 함수\n//북마크 목록 길이가 0보다 길면 렌더링\nconst ShowLinkCard = ({\n  bookmarks,\n  sideMenuOpen,\n  bookmarkDetailOpen,\n  onDelete,\n  onEdit,\n  sortingOption,\n  onLinkCardClick\n}) => {\n  const [gridColumns, setGridColumns] = useState(6); // 기본적으로 6개 열\n  // 화면 크기와 메뉴 상태에 따라 그리드 열 개수를 동적으로 설정하는 함수\n  const calculateGridColumns = () => {\n    const windowWidth = window.innerWidth;\n    let columns = 6; // 기본 열 개수\n\n    // 메뉴가 열렸을 경우 화면 길이를 빼고 계산\n    if (sideMenuOpen && bookmarkDetailOpen) {\n      columns = Math.floor((windowWidth - 20 * parseFloat(getComputedStyle(document.documentElement).fontSize)) / 200); // sideMenu와 bookmarkDetail이 열렸을 때\n    } else if (sideMenuOpen || bookmarkDetailOpen) {\n      columns = Math.floor((windowWidth - 10 * parseFloat(getComputedStyle(document.documentElement).fontSize)) / 200); // 하나만 열렸을 때\n    } else {\n      columns = Math.floor(windowWidth / 200); // 기본적으로 윈도우 창 크기에 맞춰\n    }\n    setGridColumns(columns);\n  };\n\n  // 화면 크기 변경 시 그리드 열 개수 재계산\n  useEffect(() => {\n    window.addEventListener(\"resize\", calculateGridColumns);\n    calculateGridColumns(); // 최초 렌더링 시 한 번 호출\n\n    // 이벤트 리스너 정리\n    return () => {\n      window.removeEventListener(\"resize\", calculateGridColumns);\n    };\n  }, [sideMenuOpen, bookmarkDetailOpen]); // 메뉴 상태가 변경될 때마다 호출\n\n  //Sorting\n  const sortBookmarks = (bookmarks, sortingOption) => {\n    if (sortingOption === \"최근 저장\") {\n      return bookmarks.sort((a, b) => b.id - a.id);\n    } else if (sortingOption === \"오래된 저장\") {\n      return bookmarks.sort((a, b) => a.id - b.id);\n    } else if (sortingOption === \"오름차순\") {\n      return bookmarks.sort((a, b) => a.title.localeCompare(b.title)); // 제목 알파벳 오름차순 정렬\n    } else if (sortingOption === \"내림차순\") {\n      return bookmarks.sort((a, b) => b.title.localeCompare(a.title)); // 제목 알파벳 내림차순 정렬\n    }\n    return bookmarks;\n  };\n  const sortedBookmarks = sortingOption ? sortBookmarks([...bookmarks], sortingOption) : bookmarks;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bookmark-grid\",\n    style: {\n      gridTemplateColumns: `repeat(${gridColumns}, 1fr)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, sortedBookmarks.length > 0 ? sortedBookmarks.map(bookmark => /*#__PURE__*/React.createElement(LinkCard, {\n    key: bookmark.id //리스트에서 고유 식별자 사용\n    ,\n    bookmark: bookmark //각 북마크 데이터를 BookmarkItem에 전달\n    ,\n    onDelete: onDelete //삭제 기능을 BookmarkItem에 전달\n    ,\n    onEdit: onEdit,\n    onClick: () => {\n      console.log(\"Card clicked:\", bookmark);\n      onLinkCardClick(bookmark); // 안전하게 호출\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"...\"));\n};\nexport default ShowLinkCard;","map":{"version":3,"names":["React","useState","useEffect","LinkCard","ShowLinkCard","bookmarks","sideMenuOpen","bookmarkDetailOpen","onDelete","onEdit","sortingOption","onLinkCardClick","gridColumns","setGridColumns","calculateGridColumns","windowWidth","window","innerWidth","columns","Math","floor","parseFloat","getComputedStyle","document","documentElement","fontSize","addEventListener","removeEventListener","sortBookmarks","sort","a","b","id","title","localeCompare","sortedBookmarks","createElement","className","style","gridTemplateColumns","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","length","map","bookmark","key","onClick","console","log"],"sources":["/Users/mingmaengmung/Documents/GitHub/Sofa-Front/sofa/src/components/LinkCard/ShowLinkCard.js"],"sourcesContent":["// BookmarkList.js\n\nimport React, { useState, useEffect } from \"react\";\nimport LinkCard from \"./LinkCard.js\";\nimport \"./ShowLinkCard.css\";\n\n//bookmarks : 북마크 데이터 배열(id, title, url 포함)\n//onDelete : 북마크 삭제 함수\n//북마크 목록 길이가 0보다 길면 렌더링\nconst ShowLinkCard = ({\n  bookmarks,\n  sideMenuOpen,\n  bookmarkDetailOpen,\n  onDelete,\n  onEdit,\n  sortingOption,\n  onLinkCardClick,\n}) => {\n  const [gridColumns, setGridColumns] = useState(6); // 기본적으로 6개 열\n  // 화면 크기와 메뉴 상태에 따라 그리드 열 개수를 동적으로 설정하는 함수\n  const calculateGridColumns = () => {\n    const windowWidth = window.innerWidth;\n    let columns = 6; // 기본 열 개수\n\n    // 메뉴가 열렸을 경우 화면 길이를 빼고 계산\n    if (sideMenuOpen && bookmarkDetailOpen) {\n      columns = Math.floor(\n        (windowWidth -\n          20 *\n            parseFloat(getComputedStyle(document.documentElement).fontSize)) /\n          200\n      ); // sideMenu와 bookmarkDetail이 열렸을 때\n    } else if (sideMenuOpen || bookmarkDetailOpen) {\n      columns = Math.floor(\n        (windowWidth -\n          10 *\n            parseFloat(getComputedStyle(document.documentElement).fontSize)) /\n          200\n      ); // 하나만 열렸을 때\n    } else {\n      columns = Math.floor(windowWidth / 200); // 기본적으로 윈도우 창 크기에 맞춰\n    }\n\n    setGridColumns(columns);\n  };\n\n  // 화면 크기 변경 시 그리드 열 개수 재계산\n  useEffect(() => {\n    window.addEventListener(\"resize\", calculateGridColumns);\n    calculateGridColumns(); // 최초 렌더링 시 한 번 호출\n\n    // 이벤트 리스너 정리\n    return () => {\n      window.removeEventListener(\"resize\", calculateGridColumns);\n    };\n  }, [sideMenuOpen, bookmarkDetailOpen]); // 메뉴 상태가 변경될 때마다 호출\n\n  //Sorting\n  const sortBookmarks = (bookmarks, sortingOption) => {\n    if (sortingOption === \"최근 저장\") {\n      return bookmarks.sort((a, b) => b.id - a.id);\n    } else if (sortingOption === \"오래된 저장\") {\n      return bookmarks.sort((a, b) => a.id - b.id);\n    } else if (sortingOption === \"오름차순\") {\n      return bookmarks.sort((a, b) => a.title.localeCompare(b.title)); // 제목 알파벳 오름차순 정렬\n    } else if (sortingOption === \"내림차순\") {\n      return bookmarks.sort((a, b) => b.title.localeCompare(a.title)); // 제목 알파벳 내림차순 정렬\n    }\n    return bookmarks;\n  };\n\n  const sortedBookmarks = sortingOption\n    ? sortBookmarks([...bookmarks], sortingOption)\n    : bookmarks;\n\n  return (\n    <div\n      className=\"bookmark-grid\"\n      style={{ gridTemplateColumns: `repeat(${gridColumns}, 1fr)` }}\n    >\n      {sortedBookmarks.length > 0 ? (\n        sortedBookmarks.map((bookmark) => (\n          <LinkCard\n            key={bookmark.id} //리스트에서 고유 식별자 사용\n            bookmark={bookmark} //각 북마크 데이터를 BookmarkItem에 전달\n            onDelete={onDelete} //삭제 기능을 BookmarkItem에 전달\n            onEdit={onEdit}\n            onClick={() => {\n              console.log(\"Card clicked:\", bookmark);\n              onLinkCardClick(bookmark); // 안전하게 호출\n            }}\n          />\n        ))\n      ) : (\n        <p>...</p>\n      )}\n    </div>\n  );\n};\n\nexport default ShowLinkCard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}