{"ast":null,"code":"var _jsxFileName = \"/Users/mingmaengmung/Documents/GitHub/Sofa-Front/sofa/src/pages/SignPage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\"; // Redux 관련 hooks\nimport { setTokens } from \"../redux/actions/authActions\"; // 액션 임포트\nimport \"../components/Layout/HeaderStyle.css\";\nimport \"./onBoarding-layout.css\";\nimport Button from \"../components/Button/Button\";\nimport { tempLogin } from \"../services/loginService\"; // Google 로그인 서비스 호출\nimport { folderGet, folderPost, folderDelete, folderPut } from \"../services/folderService\";\nimport { put } from \"../services/apiClient\";\nimport { linkCardPost, linkCardAiPost } from \"../services/linkCardService\";\nimport { settingGet, settingPatch } from \"../services/settingService\";\nconst ImagePlaceholder = ({\n  width,\n  height\n}) => {\n  const placeholderStyle = {\n    width: `${width}px`,\n    height: `${height}px`\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-placeholder\",\n    style: placeholderStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC790\\uB9AC \\uD45C\\uC2DC\\uC9C0\");\n};\nconst SignPage = () => {\n  const dispatch = useDispatch(); // dispatch 사용\n\n  // 1. 컴포넌트 내부에서 folderList를 상태로 관리\n  const [folderList, setFolderList] = useState([]); // 초기값은 빈 배열로 설정\n\n  // 임시 로그인 함수 호출 핸들러\n  const handleGoogleLogin = async () => {\n    try {\n      const headers = {\n        \"email\": \"mg0454@gmail.com\",\n        \"name\": \"성명근\"\n      };\n      const response = await tempLogin(headers); // tempLogin 호출\n\n      console.log('Google Login Response:', response); // 응답을 제대로 확인\n\n      // 응답에서 accessToken, refreshToken 추출\n      if (response && response.accessToken && response.refreshToken) {\n        dispatch(setTokens(response.accessToken, response.refreshToken)); // 토큰 저장\n        console.log('로그인 성공!'); // 성공 메시지 설정\n      } else {\n        console.log('로그인 응답에 문제가 있습니다.'); // 응답이 없거나 이상할 때 처리\n      }\n    } catch (err) {\n      console.log('Login Error:', err);\n    } finally {\n      console.log('로딩 종료'); // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 추가 핸들러\n  const hanldeFolderPost = async () => {\n    try {\n      const headers = {\n        \"name\": encodeURIComponent(\"아무개\")\n      };\n      const response = await folderPost(headers);\n      console.log('folderPost response:', response); // 응답 값 확인\n\n      if (response && response.floderList) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setFolderList(response.floderList);\n      }\n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  // 폴더 조회 핸들러\n  const hanldeFolderGet = async () => {\n    try {\n      const headers = {};\n      const response = await folderGet();\n      if (response && response.floderList) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setFolderList(response.floderList);\n      }\n      console.log('폴더 조회 응답:', response);\n    } catch (err) {\n      console.log('폴더 조회 실패!');\n    } finally {\n      console.log('로딩 종료'); // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 삭제 핸들러\n  const hanldeFolderDelete = async () => {\n    const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n    if (!lastFolder) {\n      console.log('삭제할 폴더가 없습니다.'); // 폴더가 없음을 로그로 출력\n      return; // early return으로 함수 종료\n    }\n    console.log(lastFolder.id);\n    try {\n      const headers = {};\n      const response = await folderDelete(headers, lastFolder.id);\n      console.log('폴더 삭제 응답:', response);\n\n      // 폴더 삭제 후 폴더 목록 갱신\n      hanldeFolderGet();\n    } catch (err) {\n      console.log(err);\n      console.log('폴더 삭제 실패!');\n    } finally {\n      console.log('로딩 종료'); // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 수정 핸들러\n  const hanldeFolderPut = async () => {\n    const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n    try {\n      const headers = {\n        \"name\": \"김데데\"\n      };\n      const response = await folderPut(headers, lastFolder.id);\n      console.log('folderPut response:', response); // 응답 값 확인\n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeLinkCardPost = async () => {\n    try {\n      const headers = {\n        \"title\": \"아무개\",\n        \"url\": \"www.naver.com\",\n        \"folderId\": \"TmxeMycIzgLMj_Ao3dDcfg==\",\n        \"tagList\": [{\n          \"id\": 0,\n          \"tagType\": \"CUSTOM\"\n        }],\n        \"memo\": \"개똥벌레\",\n        \"summary\": \"개똥벌레\"\n      };\n      const response = await linkCardPost(headers);\n      console.log('linkCardPost response:', response); // 응답 값 확인\n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeSettingGet = async () => {\n    try {\n      const headers = {\n        \"encryptedId\": \"string\",\n        \"isRemindAlarm\": false,\n        \"isRecommendAlarm\": true,\n        \"isNoticeAlarm\": true\n      };\n      const response = await settingGet(headers);\n      console.log('settingGet response:', response); // 응답 값 확인\n    } catch (err) {\n      console.error('설정 조회 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeSettingPatch = async () => {\n    try {\n      const headers = {};\n      const response = await settingPatch(headers);\n      console.log('settingPatch response:', response); // 응답 값 확인\n    } catch (err) {\n      console.error('설정 조회 실패:', err);\n    }\n  };\n  const axios = require('axios');\n  const cheerio = require('cheerio');\n\n  // URL에서 첫 번째 이미지 URL을 추출하는 함수\n  const fetchImageUrlFromPage = async url => {\n    try {\n      const response = await axios.get(url); // 외부 URL을 요청\n      const $ = cheerio.load(response.data); // HTML 파싱\n      const imageUrl = $('img').first().attr('src'); // 첫 번째 이미지 추출\n\n      if (imageUrl) {\n        return imageUrl;\n      } else {\n        throw new Error('이미지를 찾을 수 없습니다.');\n      }\n    } catch (error) {\n      console.error('이미지 URL 추출 실패:', error);\n      throw error;\n    }\n  };\n\n  // AI 링크카드 추가 핸들러\n  const handleLinkCardAiPost = async () => {\n    try {\n      const url = \"https://velog.io/@hyeongjun/Flutter-00.-%ED%94%8C%EB%9F%AC%ED%84%B0-%EA%B0%9C%EB%B0%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\"; // 임의 URL\n      const imageUrl = await fetchImageUrlFromPage(url); // URL에서 이미지 URL 추출\n\n      const headers = {\n        \"url\": url,\n        \"imageUrl\": imageUrl\n      };\n      console.log(url);\n      console.log(imageUrl);\n\n      // const response = await linkCardAiPost(headers);\n      // console.log('settingGet response:', response);  // 응답 값 확인\n    } catch (err) {\n      console.error('링크카드 생성 실패:', err);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"signpage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"logo\",\n    src: \"example.png\",\n    alt: \"logo\",\n    onClick: () => window.location.reload(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"main\", {\n    className: \"sign-main-style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ImagePlaceholder, {\n    width: 362,\n    height: 320,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"sign-slogan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 11\n    }\n  }, \"\\uC11C\\uBE44\\uC2A4 \\uBA54\\uC778 \\uC2AC\\uB85C\\uAC74 \\uCF54\\uBA58\\uD2B8\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }, \"\\uC11C\\uBE44\\uC2A4 \\uC11C\\uBE0C \\uC2AC\\uB85C\\uAC74 \\uBC0F \\uAE30\\uD0C0 \\uC124\\uBA85\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-text-button-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Google \\uACC4\\uC815\\uC73C\\uB85C \\uB85C\\uADF8\\uC778\",\n    onClick: handleGoogleLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uD3F4\\uB354\\uCD94\\uAC00\",\n    onClick: hanldeFolderPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uD3F4\\uB354\\uC870\\uD68C\",\n    onClick: hanldeFolderGet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uD3F4\\uB354\\uC0AD\\uC81C\",\n    onClick: hanldeFolderDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uD3F4\\uB354\\uC218\\uC815\",\n    onClick: hanldeFolderPut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uB9C1\\uD06C\\uCE74\\uB4DC\\uCD94\\uAC00\",\n    onClick: hanldeLinkCardPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uB9C1\\uD06C\\uCE74\\uB4DCAi\\uC0DD\\uC131\",\n    onClick: handleLinkCardAiPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uC124\\uC815\\uC870\\uD68C\",\n    onClick: hanldeSettingGet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uC124\\uC815\\uBCC0\\uACBD\",\n    onClick: hanldeSettingPatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  })))));\n};\nexport default SignPage;","map":{"version":3,"names":["React","useState","useEffect","useDispatch","setTokens","Button","tempLogin","folderGet","folderPost","folderDelete","folderPut","put","linkCardPost","linkCardAiPost","settingGet","settingPatch","ImagePlaceholder","width","height","placeholderStyle","createElement","className","style","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","SignPage","dispatch","folderList","setFolderList","handleGoogleLogin","headers","response","console","log","accessToken","refreshToken","err","hanldeFolderPost","encodeURIComponent","floderList","error","hanldeFolderGet","hanldeFolderDelete","lastFolder","length","id","hanldeFolderPut","hanldeLinkCardPost","hanldeSettingGet","hanldeSettingPatch","axios","require","cheerio","fetchImageUrlFromPage","url","get","$","load","data","imageUrl","first","attr","Error","handleLinkCardAiPost","src","alt","onClick","window","location","reload","label"],"sources":["/Users/mingmaengmung/Documents/GitHub/Sofa-Front/sofa/src/pages/SignPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";  // Redux 관련 hooks\nimport { setTokens } from \"../redux/actions/authActions\"; // 액션 임포트\nimport \"../components/Layout/HeaderStyle.css\";\nimport \"./onBoarding-layout.css\";\nimport Button from \"../components/Button/Button\";\nimport { tempLogin } from \"../services/loginService\"; // Google 로그인 서비스 호출\nimport { folderGet, folderPost, folderDelete, folderPut} from \"../services/folderService\";\nimport { put } from \"../services/apiClient\";\nimport { linkCardPost, linkCardAiPost } from \"../services/linkCardService\";\nimport { settingGet, settingPatch } from \"../services/settingService\";\n\nconst ImagePlaceholder = ({ width, height }) => {\n  const placeholderStyle = {\n    width: `${width}px`,\n    height: `${height}px`,\n  };\n\n  return (\n    <div className=\"image-placeholder\" style={placeholderStyle}>\n      이미지 자리 표시지\n    </div>\n  );\n};\n\nconst SignPage = () => {\n  const dispatch = useDispatch();  // dispatch 사용\n  \n  // 1. 컴포넌트 내부에서 folderList를 상태로 관리\n  const [folderList, setFolderList] = useState([]); // 초기값은 빈 배열로 설정\n  \n  // 임시 로그인 함수 호출 핸들러\n  const handleGoogleLogin = async () => {\n    try {\n      const headers = {\n        \"email\": \"mg0454@gmail.com\",\n        \"name\": \"성명근\"\n      };\n      const response = await tempLogin(headers);  // tempLogin 호출\n  \n      console.log('Google Login Response:', response);  // 응답을 제대로 확인\n  \n      // 응답에서 accessToken, refreshToken 추출\n      if (response && response.accessToken && response.refreshToken) {\n        dispatch(setTokens(response.accessToken, response.refreshToken)); // 토큰 저장\n        console.log('로그인 성공!');  // 성공 메시지 설정\n      } else {\n        console.log('로그인 응답에 문제가 있습니다.');  // 응답이 없거나 이상할 때 처리\n      }\n    } catch (err) {\n      console.log('Login Error:', err);\n    } finally {\n      console.log('로딩 종료');  // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 추가 핸들러\n  const hanldeFolderPost = async () => {\n    try {\n      const headers = {\n        \"name\": encodeURIComponent(\"아무개\")\n      };\n      const response = await folderPost(headers);\n      console.log('folderPost response:', response);  // 응답 값 확인\n      \n      if (response && response.floderList) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setFolderList(response.floderList);\n      }\n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  // 폴더 조회 핸들러\n  const hanldeFolderGet = async () => {\n    try {\n      const headers = {};\n      const response = await folderGet();\n\n      if (response && response.floderList) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setFolderList(response.floderList);  \n      }\n      console.log('폴더 조회 응답:', response);\n    } catch (err) {\n      console.log('폴더 조회 실패!');\n    } finally {\n      console.log('로딩 종료');  // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 삭제 핸들러\n  const hanldeFolderDelete = async () => {\n    const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n\n    if (!lastFolder) {\n      console.log('삭제할 폴더가 없습니다.');  // 폴더가 없음을 로그로 출력\n      return;  // early return으로 함수 종료\n    }\n\n    console.log(lastFolder.id);\n\n    try {\n      const headers = {};\n      const response = await folderDelete(headers, lastFolder.id);\n\n      console.log('폴더 삭제 응답:', response);\n\n      // 폴더 삭제 후 폴더 목록 갱신\n      hanldeFolderGet();\n    } catch (err) {\n      console.log(err);\n      console.log('폴더 삭제 실패!');\n    } finally {\n      console.log('로딩 종료');  // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 수정 핸들러\n  const hanldeFolderPut = async () => {\n    const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n\n    try {\n      const headers = {\n        \"name\": \"김데데\"\n      };\n      const response = await folderPut(headers, lastFolder.id);\n      console.log('folderPut response:', response);  // 응답 값 확인\n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeLinkCardPost = async () => {\n    try {\n      const headers = {\n        \"title\": \"아무개\",\n        \"url\": \"www.naver.com\",\n        \"folderId\": \"TmxeMycIzgLMj_Ao3dDcfg==\",\n        \"tagList\": [\n          {\n            \"id\": 0,\n            \"tagType\": \"CUSTOM\"\n          }\n        ],\n        \"memo\": \"개똥벌레\",\n        \"summary\": \"개똥벌레\"\n      };\n      const response = await linkCardPost(headers);\n      console.log('linkCardPost response:', response);  // 응답 값 확인\n    \n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeSettingGet = async () => {\n    try {\n      const headers = {\n        \"encryptedId\": \"string\",\n        \"isRemindAlarm\": false,\n        \"isRecommendAlarm\": true,\n        \"isNoticeAlarm\": true\n      };\n      const response = await settingGet(headers);\n      console.log('settingGet response:', response);  // 응답 값 확인\n    \n    } catch (err) {\n      console.error('설정 조회 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeSettingPatch = async () => {\n    try {\n      const headers = {};\n      const response = await settingPatch(headers);\n      console.log('settingPatch response:', response);  // 응답 값 확인\n    \n    } catch (err) {\n      console.error('설정 조회 실패:', err);\n    }\n  };\n\n  const axios = require('axios');\n  const cheerio = require('cheerio');\n  \n  // URL에서 첫 번째 이미지 URL을 추출하는 함수\n  const fetchImageUrlFromPage = async (url) => {\n    try {\n      const response = await axios.get(url);  // 외부 URL을 요청\n      const $ = cheerio.load(response.data);  // HTML 파싱\n      const imageUrl = $('img').first().attr('src');  // 첫 번째 이미지 추출\n  \n      if (imageUrl) {\n        return imageUrl;\n      } else {\n        throw new Error('이미지를 찾을 수 없습니다.');\n      }\n    } catch (error) {\n      console.error('이미지 URL 추출 실패:', error);\n      throw error;\n    }\n  };\n  \n  // AI 링크카드 추가 핸들러\n  const handleLinkCardAiPost = async () => {\n    try {\n      const url = \"https://velog.io/@hyeongjun/Flutter-00.-%ED%94%8C%EB%9F%AC%ED%84%B0-%EA%B0%9C%EB%B0%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\";  // 임의 URL\n      const imageUrl = await fetchImageUrlFromPage(url);  // URL에서 이미지 URL 추출\n  \n      const headers = {\n        \"url\": url,\n        \"imageUrl\": imageUrl,\n      };\n\n      console.log(url);\n\n      console.log(imageUrl);\n  \n      // const response = await linkCardAiPost(headers);\n      // console.log('settingGet response:', response);  // 응답 값 확인\n    } catch (err) {\n      console.error('링크카드 생성 실패:', err);\n    }\n  };\n  \n  \n  return (\n    <div className=\"signpage\">\n      <header className=\"header\">\n        <img\n          className=\"logo\"\n          src=\"example.png\"\n          alt=\"logo\"\n          onClick={() => window.location.reload()}\n        />\n      </header>\n      <main className=\"sign-main-style\">\n        <div className=\"image-section\">\n          <ImagePlaceholder width={362} height={320} /> \n        </div>\n        <div className=\"text-section\">\n          <h1 className=\"sign-slogan\">서비스 메인 슬로건 코멘트</h1>\n          <p>서비스 서브 슬로건 및 기타 설명</p>\n          <div className=\"sign-text-button-wrapper\">\n            <Button\n              label=\"Google 계정으로 로그인\"\n              onClick={handleGoogleLogin} \n            />\n            <Button\n              label=\"폴더추가\"\n              onClick={hanldeFolderPost}\n            />\n            <Button\n              label=\"폴더조회\"\n              onClick={hanldeFolderGet}\n            />\n            <Button\n              label=\"폴더삭제\"\n              onClick={hanldeFolderDelete}\n            />\n            <Button\n              label=\"폴더수정\"\n              onClick={hanldeFolderPut}\n            />\n            <Button\n              label=\"링크카드추가\"\n              onClick={hanldeLinkCardPost}\n            />\n            <Button\n              label=\"링크카드Ai생성\"\n              onClick={handleLinkCardAiPost}\n            />\n            <Button\n              label=\"설정조회\"\n              onClick={hanldeSettingGet}\n            />\n            <Button\n              label=\"설정변경\"\n              onClick={hanldeSettingPatch}\n            />\n            \n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default SignPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}