{"ast":null,"code":"var _jsxFileName = \"/Users/mingmaengmung/Documents/GitHub/Sofa-Front/sofa/src/pages/SignPage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\"; // Redux 관련 hooks\nimport { setTokens } from \"../redux/actions/authActions\"; // 액션 임포트\nimport \"../components/Layout/HeaderStyle.css\";\nimport \"./onBoarding-layout.css\";\nimport Button from \"../components/Button/Button\";\nimport { tempLogin } from \"../services/loginService\"; // Google 로그인 서비스 호출\nimport { folderGet, folderPost, folderDelete, folderPut } from \"../services/folderService\";\nimport { put } from \"../services/apiClient\";\nimport { linkCardPost, linkCardAiPost, linkCardListGet } from \"../services/linkCardService\";\nimport { settingGet, settingPatch } from \"../services/settingService\";\nimport { memberGet } from \"../services/memberService\";\nconst ImagePlaceholder = ({\n  width,\n  height\n}) => {\n  const placeholderStyle = {\n    width: `${width}px`,\n    height: `${height}px`\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-placeholder\",\n    style: placeholderStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC790\\uB9AC \\uD45C\\uC2DC\\uC9C0\");\n};\nconst SignPage = () => {\n  const dispatch = useDispatch(); // dispatch 사용\n\n  // 1. 컴포넌트 내부에서 folderList를 상태로 관리\n  const [folderList, setFolderList] = useState([]); // 초기값은 빈 배열로 설정\n  const [linkCardListDetail, setLinkCardListDetail] = useState([]); // 초기값은 빈 배열로 설정\n\n  // 임시 로그인 함수 호출 핸들러\n  const handleGoogleLogin = async () => {\n    try {\n      const data = {\n        \"email\": \"mg0454@gmail.com\",\n        \"name\": \"성명근\"\n      };\n      console.log(\"handleGoogleLogin:\", data);\n      const response = await tempLogin(data); // tempLogin 호출\n\n      console.log('Google Login Response:', response); // 응답을 제대로 확인\n\n      // 응답에서 accessToken, refreshToken 추출\n      if (response && response.accessToken && response.refreshToken) {\n        dispatch(setTokens(response.accessToken, response.refreshToken)); // 토큰 저장\n        console.log('로그인 성공!'); // 성공 메시지 설정\n        hanldeMemberGet();\n      } else {\n        console.log('로그인 응답에 문제가 있습니다.'); // 응답이 없거나 이상할 때 처리\n      }\n    } catch (err) {\n      console.log('Login Error:', err);\n    } finally {\n      console.log('로딩 종료'); // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 추가 핸들러\n  const hanldeFolderPost = async () => {\n    try {\n      const data = {\n        \"name\": \"ㅗㅗㅗ\"\n      };\n      console.log(\"hanldeFolderPost:\", data);\n      const response = await folderPost(data);\n      console.log('folderPost response:', response); // 응답 값 확인\n\n      if (response && response.floderList) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setFolderList(response.floderList);\n      }\n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  // 폴더 조회 핸들러\n  const hanldeFolderGet = async () => {\n    try {\n      const headers = {};\n      const response = await folderGet();\n      if (response && response.floderList) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setFolderList(response.floderList);\n      }\n      console.log('폴더 조회 응답:', response);\n    } catch (err) {\n      console.log('폴더 조회 실패!');\n    } finally {\n      console.log('로딩 종료'); // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 삭제 핸들러\n  const hanldeFolderDelete = async () => {\n    const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n    if (!lastFolder) {\n      console.log('삭제할 폴더가 없습니다.'); // 폴더가 없음을 로그로 출력\n      return; // early return으로 함수 종료\n    }\n    console.log(lastFolder.id);\n    try {\n      const headers = {};\n      const response = await folderDelete(headers, lastFolder.id);\n      console.log('폴더 삭제 응답:', response);\n\n      // 폴더 삭제 후 폴더 목록 갱신\n      hanldeFolderGet();\n    } catch (err) {\n      console.log(err);\n      console.log('폴더 삭제 실패!');\n    } finally {\n      console.log('로딩 종료'); // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 수정 핸들러\n  const hanldeFolderPut = async () => {\n    const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n    try {\n      const data = {\n        \"name\": \"김데데\"\n      };\n      const response = await folderPut(data, lastFolder.id);\n      console.log('folderPut response:', response); // 응답 값 확인\n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeLinkCardPost = async () => {\n    try {\n      const response = await linkCardPost(linkCardListDetail);\n      console.log('linkCardPost response:', response); // 응답 값 확인\n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n  const handleLinkCardAiPost = async () => {\n    try {\n      // 임의의 URL을 설정\n      const url = \"https://velog.io/@anhesu11/소프트웨어-공학-내용-정리2\";\n\n      // URL에서 이미지 URL 추출\n      const imageUrl = await fetchImageUrlFromPage(url);\n\n      // 헤더에 이미지 URL과 URL 추가\n      const data = {\n        \"url\": url,\n        \"imageUrl\": imageUrl\n      };\n      console.log('추출된 이미지 URL:', imageUrl);\n\n      // API 요청 보내기 (예시: linkCardAiPost)\n      const response = await linkCardAiPost(data);\n      if (response) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setLinkCardListDetail(response);\n      }\n      console.log('settingGet response:', response); // 응답 값 확인\n    } catch (err) {\n      console.error('링크카드 생성 실패:', err);\n    }\n  };\n\n  // 폴더 조회 핸들러\n  const hanldeLinkCardListGet = async () => {\n    try {\n      const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n      const response = await linkCardListGet(lastFolder.id, \"RECENTLY_SAVED\", \"ASCENDING\", 0, 10);\n      console.log('링크카드 리스트 조회 응답:', response);\n    } catch (err) {\n      console.log('링크카드 리스트 실패!');\n    } finally {\n      console.log('로딩 종료'); // 로딩 상태 종료\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeSettingGet = async () => {\n    try {\n      const headers = {\n        \"encryptedId\": \"string\",\n        \"isRemindAlarm\": false,\n        \"isRecommendAlarm\": true,\n        \"isNoticeAlarm\": true\n      };\n      const response = await settingGet(headers);\n      console.log('settingGet response:', response); // 응답 값 확인\n    } catch (err) {\n      console.error('설정 조회 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeSettingPatch = async () => {\n    try {\n      const headers = {};\n      const response = await settingPatch(headers);\n      console.log('settingPatch response:', response); // 응답 값 확인\n    } catch (err) {\n      console.error('설정 조회 실패:', err);\n    }\n  };\n  const fetchImageUrlFromPage = async url => {\n    try {\n      var _doc$querySelector;\n      const proxyUrl = 'https://thingproxy.freeboard.io/fetch/';\n      const targetUrl = url;\n      const response = await fetch(proxyUrl + targetUrl);\n      const html = await response.text(); // HTML 텍스트로 변환\n\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, 'text/html');\n\n      // <meta> 태그에서 이미지 URL 추출 (OG 이미지 등)\n      let imageUrl = (_doc$querySelector = doc.querySelector('meta[property=\"og:image\"]')) === null || _doc$querySelector === void 0 ? void 0 : _doc$querySelector.content;\n      if (!imageUrl) {\n        var _doc$querySelector2;\n        // <img> 태그에서 src 추출\n        imageUrl = (_doc$querySelector2 = doc.querySelector('img')) === null || _doc$querySelector2 === void 0 ? void 0 : _doc$querySelector2.src;\n      }\n      if (imageUrl) {\n        return imageUrl; // 이미지 URL 반환\n      } else {\n        throw new Error('이미지를 찾을 수 없습니다.');\n      }\n    } catch (error) {\n      console.error('이미지 URL 추출 실패:', error);\n      throw error;\n    }\n  };\n\n  // 폴더 조회 핸들러\n  const hanldeMemberGet = async () => {\n    try {\n      const headers = {};\n      const response = await memberGet();\n      console.log('멤버 조회 응답:', response);\n    } catch (err) {\n      console.log('멤버 조회 실패!');\n    } finally {\n      console.log('로딩 종료'); // 로딩 상태 종료\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"signpage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"logo\",\n    src: \"example.png\",\n    alt: \"logo\",\n    onClick: () => window.location.reload(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"main\", {\n    className: \"sign-main-style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ImagePlaceholder, {\n    width: 362,\n    height: 320,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"sign-slogan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 11\n    }\n  }, \"\\uC11C\\uBE44\\uC2A4 \\uBA54\\uC778 \\uC2AC\\uB85C\\uAC74 \\uCF54\\uBA58\\uD2B8\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 11\n    }\n  }, \"\\uC11C\\uBE44\\uC2A4 \\uC11C\\uBE0C \\uC2AC\\uB85C\\uAC74 \\uBC0F \\uAE30\\uD0C0 \\uC124\\uBA85\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-text-button-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Google \\uACC4\\uC815\\uC73C\\uB85C \\uB85C\\uADF8\\uC778\",\n    onClick: handleGoogleLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uD3F4\\uB354\\uCD94\\uAC00\",\n    onClick: hanldeFolderPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uD3F4\\uB354\\uC870\\uD68C\",\n    onClick: hanldeFolderGet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uD3F4\\uB354\\uC0AD\\uC81C\",\n    onClick: hanldeFolderDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uD3F4\\uB354\\uC218\\uC815\",\n    onClick: hanldeFolderPut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uB9C1\\uD06C\\uCE74\\uB4DC\\uCD94\\uAC00\",\n    onClick: hanldeLinkCardPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uB9C1\\uD06C\\uCE74\\uB4DCAi\\uC0DD\\uC131\",\n    onClick: handleLinkCardAiPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uB9C1\\uD06C\\uCE74\\uB4DC\\uB9AC\\uC2A4\\uD2B8\\uC870\\uD68C\",\n    onClick: hanldeLinkCardListGet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uC124\\uC815\\uC870\\uD68C\",\n    onClick: hanldeSettingGet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"\\uC124\\uC815\\uBCC0\\uACBD\",\n    onClick: hanldeSettingPatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }\n  })))));\n};\nexport default SignPage;","map":{"version":3,"names":["React","useState","useEffect","useDispatch","setTokens","Button","tempLogin","folderGet","folderPost","folderDelete","folderPut","put","linkCardPost","linkCardAiPost","linkCardListGet","settingGet","settingPatch","memberGet","ImagePlaceholder","width","height","placeholderStyle","createElement","className","style","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","SignPage","dispatch","folderList","setFolderList","linkCardListDetail","setLinkCardListDetail","handleGoogleLogin","data","console","log","response","accessToken","refreshToken","hanldeMemberGet","err","hanldeFolderPost","floderList","error","hanldeFolderGet","headers","hanldeFolderDelete","lastFolder","length","id","hanldeFolderPut","hanldeLinkCardPost","handleLinkCardAiPost","url","imageUrl","fetchImageUrlFromPage","hanldeLinkCardListGet","hanldeSettingGet","hanldeSettingPatch","_doc$querySelector","proxyUrl","targetUrl","fetch","html","text","parser","DOMParser","doc","parseFromString","querySelector","content","_doc$querySelector2","src","Error","alt","onClick","window","location","reload","label"],"sources":["/Users/mingmaengmung/Documents/GitHub/Sofa-Front/sofa/src/pages/SignPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";  // Redux 관련 hooks\nimport { setTokens } from \"../redux/actions/authActions\"; // 액션 임포트\nimport \"../components/Layout/HeaderStyle.css\";\nimport \"./onBoarding-layout.css\";\nimport Button from \"../components/Button/Button\";\nimport { tempLogin } from \"../services/loginService\"; // Google 로그인 서비스 호출\nimport { folderGet, folderPost, folderDelete, folderPut} from \"../services/folderService\";\nimport { put } from \"../services/apiClient\";\nimport { linkCardPost, linkCardAiPost, linkCardListGet } from \"../services/linkCardService\";\nimport { settingGet, settingPatch } from \"../services/settingService\";\nimport { memberGet } from \"../services/memberService\";\n\nconst ImagePlaceholder = ({ width, height }) => {\n  const placeholderStyle = {\n    width: `${width}px`,\n    height: `${height}px`,\n  };\n\n  return (\n    <div className=\"image-placeholder\" style={placeholderStyle}>\n      이미지 자리 표시지\n    </div>\n  );\n};\n\nconst SignPage = () => {\n  const dispatch = useDispatch();  // dispatch 사용\n  \n  // 1. 컴포넌트 내부에서 folderList를 상태로 관리\n  const [folderList, setFolderList] = useState([]); // 초기값은 빈 배열로 설정\n  const [linkCardListDetail, setLinkCardListDetail] = useState([]); // 초기값은 빈 배열로 설정\n\n  // 임시 로그인 함수 호출 핸들러\n  const handleGoogleLogin = async () => {\n    try {\n      const data = {\n        \"email\": \"mg0454@gmail.com\",\n        \"name\": \"성명근\"\n      };\n\n      console.log(\"handleGoogleLogin:\", data);\n\n      const response = await tempLogin(data);  // tempLogin 호출\n  \n      console.log('Google Login Response:', response);  // 응답을 제대로 확인\n  \n      // 응답에서 accessToken, refreshToken 추출\n      if (response && response.accessToken && response.refreshToken) {\n        dispatch(setTokens(response.accessToken, response.refreshToken)); // 토큰 저장\n        console.log('로그인 성공!');  // 성공 메시지 설정\n        hanldeMemberGet();\n      } else {\n        console.log('로그인 응답에 문제가 있습니다.');  // 응답이 없거나 이상할 때 처리\n      }\n    } catch (err) {\n      console.log('Login Error:', err);\n    } finally {\n      console.log('로딩 종료');  // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 추가 핸들러\n  const hanldeFolderPost = async () => {\n    try {\n      const data = {\n        \"name\": \"ㅗㅗㅗ\"\n      };\n\n      console.log(\"hanldeFolderPost:\", data);\n\n      const response = await folderPost(data);\n\n      console.log('folderPost response:', response);  // 응답 값 확인\n      \n      if (response && response.floderList) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setFolderList(response.floderList);\n      }\n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  // 폴더 조회 핸들러\n  const hanldeFolderGet = async () => {\n    try {\n      const headers = {};\n      const response = await folderGet();\n\n      if (response && response.floderList) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setFolderList(response.floderList);  \n      }\n      console.log('폴더 조회 응답:', response);\n    } catch (err) {\n      console.log('폴더 조회 실패!');\n    } finally {\n      console.log('로딩 종료');  // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 삭제 핸들러\n  const hanldeFolderDelete = async () => {\n    const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n\n    if (!lastFolder) {\n      console.log('삭제할 폴더가 없습니다.');  // 폴더가 없음을 로그로 출력\n      return;  // early return으로 함수 종료\n    }\n\n    console.log(lastFolder.id);\n\n    try {\n      const headers = {};\n      const response = await folderDelete(headers, lastFolder.id);\n\n      console.log('폴더 삭제 응답:', response);\n\n      // 폴더 삭제 후 폴더 목록 갱신\n      hanldeFolderGet();\n    } catch (err) {\n      console.log(err);\n      console.log('폴더 삭제 실패!');\n    } finally {\n      console.log('로딩 종료');  // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 수정 핸들러\n  const hanldeFolderPut = async () => {\n    const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n\n    try {\n      const data = {\n        \"name\": \"김데데\"\n      };\n      const response = await folderPut(data, lastFolder.id);\n      console.log('folderPut response:', response);  // 응답 값 확인\n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeLinkCardPost = async () => {\n    try {\n      \n      const response = await linkCardPost(linkCardListDetail);\n      console.log('linkCardPost response:', response);  // 응답 값 확인\n    \n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  const handleLinkCardAiPost = async () => {\n    try {\n      // 임의의 URL을 설정\n      const url = \"https://velog.io/@anhesu11/소프트웨어-공학-내용-정리2\";\n  \n      // URL에서 이미지 URL 추출\n      const imageUrl = await fetchImageUrlFromPage(url);\n  \n      // 헤더에 이미지 URL과 URL 추가\n      const data = {\n        \"url\": url,\n        \"imageUrl\": imageUrl,\n      };\n  \n      console.log('추출된 이미지 URL:', imageUrl);\n  \n      // API 요청 보내기 (예시: linkCardAiPost)\n      const response = await linkCardAiPost(data);\n\n      if (response) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setLinkCardListDetail(response);  \n      }\n      console.log('settingGet response:', response);  // 응답 값 확인\n  \n    } catch (err) {\n      console.error('링크카드 생성 실패:', err);\n    }\n  };\n\n    // 폴더 조회 핸들러\n    const hanldeLinkCardListGet = async () => {\n      try {\n        const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n\n        const response = await linkCardListGet(\n          lastFolder.id,\n          \"RECENTLY_SAVED\",\n          \"ASCENDING\",\n          0,\n          10\n        );\n        console.log('링크카드 리스트 조회 응답:', response);\n      } catch (err) {\n        console.log('링크카드 리스트 실패!');\n      } finally {\n        console.log('로딩 종료');  // 로딩 상태 종료\n      }\n    };\n\n  // 링크 추가 핸들러\n  const hanldeSettingGet = async () => {\n    try {\n      const headers = {\n        \"encryptedId\": \"string\",\n        \"isRemindAlarm\": false,\n        \"isRecommendAlarm\": true,\n        \"isNoticeAlarm\": true\n      };\n      const response = await settingGet(headers);\n      console.log('settingGet response:', response);  // 응답 값 확인\n    \n    } catch (err) {\n      console.error('설정 조회 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeSettingPatch = async () => {\n    try {\n      const headers = {};\n      const response = await settingPatch(headers);\n      console.log('settingPatch response:', response);  // 응답 값 확인\n    \n    } catch (err) {\n      console.error('설정 조회 실패:', err);\n    }\n  };\n  \n  const fetchImageUrlFromPage = async (url) => {\n    try {\n      const proxyUrl = 'https://thingproxy.freeboard.io/fetch/';\n      const targetUrl = url;\n  \n      const response = await fetch(proxyUrl + targetUrl);\n      const html = await response.text(); // HTML 텍스트로 변환\n  \n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, 'text/html');\n  \n      // <meta> 태그에서 이미지 URL 추출 (OG 이미지 등)\n      let imageUrl = doc.querySelector('meta[property=\"og:image\"]')?.content;\n  \n      if (!imageUrl) {\n        // <img> 태그에서 src 추출\n        imageUrl = doc.querySelector('img')?.src;\n      }\n  \n      if (imageUrl) {\n        return imageUrl; // 이미지 URL 반환\n      } else {\n        throw new Error('이미지를 찾을 수 없습니다.');\n      }\n    } catch (error) {\n      console.error('이미지 URL 추출 실패:', error);\n      throw error;\n    }\n  }; \n\n  // 폴더 조회 핸들러\n  const hanldeMemberGet = async () => {\n    try {\n      const headers = {};\n      const response = await memberGet();\n\n      console.log('멤버 조회 응답:', response);\n    } catch (err) {\n      console.log('멤버 조회 실패!');\n    } finally {\n      console.log('로딩 종료');  // 로딩 상태 종료\n    }\n  };\n    \n  return (\n    <div className=\"signpage\">\n      <header className=\"header\">\n        <img\n          className=\"logo\"\n          src=\"example.png\"\n          alt=\"logo\"\n          onClick={() => window.location.reload()}\n        />\n      </header>\n      <main className=\"sign-main-style\">\n        <div className=\"image-section\">\n          <ImagePlaceholder width={362} height={320} /> \n        </div>\n        <div className=\"text-section\">\n          <h1 className=\"sign-slogan\">서비스 메인 슬로건 코멘트</h1>\n          <p>서비스 서브 슬로건 및 기타 설명</p>\n          <div className=\"sign-text-button-wrapper\">\n            <Button\n              label=\"Google 계정으로 로그인\"\n              onClick={handleGoogleLogin} \n            />\n            <Button\n              label=\"폴더추가\"\n              onClick={hanldeFolderPost}\n            />\n            <Button\n              label=\"폴더조회\"\n              onClick={hanldeFolderGet}\n            />\n            <Button\n              label=\"폴더삭제\"\n              onClick={hanldeFolderDelete}\n            />\n            <Button\n              label=\"폴더수정\"\n              onClick={hanldeFolderPut}\n            />\n            <Button\n              label=\"링크카드추가\"\n              onClick={hanldeLinkCardPost}\n            />\n            <Button\n              label=\"링크카드Ai생성\"\n              onClick={handleLinkCardAiPost}\n            />\n            <Button\n              label=\"링크카드리스트조회\"\n              onClick={hanldeLinkCardListGet}\n            />\n            <Button\n              label=\"설정조회\"\n              onClick={hanldeSettingGet}\n            />\n            <Button\n              label=\"설정변경\"\n              onClick={hanldeSettingPatch}\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default SignPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}