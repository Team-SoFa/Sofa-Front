{"ast":null,"code":"import axios from 'axios';\nimport store from '../redux/store'; // store 가져오기\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  // 타임아웃 설정\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Redux에서 accessToken을 가져오는 함수\nconst getAccessToken = () => {\n  const state = store.getState(); // store 상태 가져오기\n  return state.auth.accessToken; // authReducer에서 관리하는 accessToken 가져오기\n};\n\n// GET 요청을 위한 함수 (토큰 없는 기본 GET 요청)\nexport const get = async (url, params = {}, headers = {}) => {\n  const response = await apiClient.get(url, {\n    params,\n    headers\n  });\n  return response.data;\n};\n\n// POST 요청을 위한 함수 (토큰 없는 기본 POST 요청)\nexport const post = async (url, data = {}, headers = {}) => {\n  console.log(\"Final Headers:\", headers);\n  console.log('data:', data);\n  const response = await apiClient.post(url, data, {\n    headers\n  });\n  return response.data;\n};\n\n// PUT 요청을 위한 함수 (토큰 없는 기본 PUT 요청)\nexport const put = async (url, data = {}, headers = {}) => {\n  const response = await apiClient.put(url, data, {\n    headers\n  });\n  return response.data;\n};\n\n// DELETE 요청을 위한 함수 (토큰 없는 기본 DELETE 요청)\nexport const del = async (url, headers = {}) => {\n  const response = await apiClient.delete(url, {\n    headers\n  });\n  return response.data;\n};\n\n// GET 요청을 위한 함수 (accessToken이 필요한 GET 요청)\nexport const tokenGet = async (url, params = {}, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n  const response = await apiClient.get(url, {\n    params,\n    headers\n  });\n  return response.data;\n};\n\n// POST 요청을 위한 함수 (accessToken이 필요한 POST 요청)\nexport const tokenPost = async (url, data = {}, headers = {}) => {\n  const accessToken = getAccessToken();\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n  console.log(headers);\n  const response = await apiClient.post(url, data, {\n    headers\n  });\n  return response.data;\n};\n\n// PUT 요청을 위한 함수 (accessToken이 필요한 PUT 요청)\nexport const tokenPut = async (url, data = {}, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n  const response = await apiClient.put(url, data, {\n    headers\n  });\n  return response.data;\n};\n\n// DELETE 요청을 위한 함수 (accessToken이 필요한 DELETE 요청)\nexport const tokenDel = async (url, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n  const response = await apiClient.delete(url, {\n    headers\n  });\n  return response.data;\n};\n\n// Patch 요청을 위한 함수 (accessToken이 필요한 DELETE 요청)\nexport const tokenPatch = async (url, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n  const response = await apiClient.patch(url, {\n    headers\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","store","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","apiClient","create","baseURL","timeout","headers","getAccessToken","state","getState","auth","accessToken","get","url","params","response","data","post","console","log","put","del","delete","tokenGet","tokenPost","tokenPut","tokenDel","tokenPatch","patch"],"sources":["/Users/mingmaengmung/Documents/GitHub/Sofa-Front/sofa/src/services/apiClient.js"],"sourcesContent":["import axios from 'axios';\nimport store from '../redux/store'; // store 가져오기\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000, // 타임아웃 설정\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Redux에서 accessToken을 가져오는 함수\nconst getAccessToken = () => {\n  const state = store.getState();  // store 상태 가져오기\n  return state.auth.accessToken;   // authReducer에서 관리하는 accessToken 가져오기\n};\n\n// GET 요청을 위한 함수 (토큰 없는 기본 GET 요청)\nexport const get = async (url, params = {}, headers = {}) => {\n  const response = await apiClient.get(url, { params, headers });\n  return response.data;\n};\n\n// POST 요청을 위한 함수 (토큰 없는 기본 POST 요청)\nexport const post = async (url, data = {}, headers = {}) => {\n  console.log(\"Final Headers:\", headers);\n  console.log('data:', data);\n  const response = await apiClient.post(url, data, { headers });\n  return response.data;\n};\n\n// PUT 요청을 위한 함수 (토큰 없는 기본 PUT 요청)\nexport const put = async (url, data = {}, headers = {}) => {\n  const response = await apiClient.put(url, data, { headers });\n  return response.data;\n};\n\n// DELETE 요청을 위한 함수 (토큰 없는 기본 DELETE 요청)\nexport const del = async (url, headers = {}) => {\n  const response = await apiClient.delete(url, { headers });\n  return response.data;\n};\n\n// GET 요청을 위한 함수 (accessToken이 필요한 GET 요청)\nexport const tokenGet = async (url, params = {}, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  const response = await apiClient.get(url, { params, headers });\n  return response.data;\n};\n\n// POST 요청을 위한 함수 (accessToken이 필요한 POST 요청)\nexport const tokenPost = async (url, data = {}, headers = {}) => {\n  const accessToken = getAccessToken();\n  \n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  console.log(headers);\n  \n  const response = await apiClient.post(url, data, { headers });\n  return response.data;\n};\n\n// PUT 요청을 위한 함수 (accessToken이 필요한 PUT 요청)\nexport const tokenPut = async (url, data = {}, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  const response = await apiClient.put(url, data, { headers });\n  \n  return response.data;\n};\n\n// DELETE 요청을 위한 함수 (accessToken이 필요한 DELETE 요청)\nexport const tokenDel = async (url, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  const response = await apiClient.delete(url, { headers });\n  return response.data;\n};\n\n// Patch 요청을 위한 함수 (accessToken이 필요한 DELETE 요청)\nexport const tokenPatch = async (url, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  const response = await apiClient.patch(url, { headers });\n  return response.data;\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,gBAAgB,CAAC,CAAC;;AAEpC,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AAEvD,MAAMC,SAAS,GAAGN,KAAK,CAACO,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,KAAK,GAAGX,KAAK,CAACY,QAAQ,CAAC,CAAC,CAAC,CAAE;EACjC,OAAOD,KAAK,CAACE,IAAI,CAACC,WAAW,CAAC,CAAG;AACnC,CAAC;;AAED;AACA,OAAO,MAAMC,GAAG,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAER,OAAO,GAAG,CAAC,CAAC,KAAK;EAC3D,MAAMS,QAAQ,GAAG,MAAMb,SAAS,CAACU,GAAG,CAACC,GAAG,EAAE;IAAEC,MAAM;IAAER;EAAQ,CAAC,CAAC;EAC9D,OAAOS,QAAQ,CAACC,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,IAAI,GAAG,MAAAA,CAAOJ,GAAG,EAAEG,IAAI,GAAG,CAAC,CAAC,EAAEV,OAAO,GAAG,CAAC,CAAC,KAAK;EAC1DY,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEb,OAAO,CAAC;EACtCY,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEH,IAAI,CAAC;EAC1B,MAAMD,QAAQ,GAAG,MAAMb,SAAS,CAACe,IAAI,CAACJ,GAAG,EAAEG,IAAI,EAAE;IAAEV;EAAQ,CAAC,CAAC;EAC7D,OAAOS,QAAQ,CAACC,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMI,GAAG,GAAG,MAAAA,CAAOP,GAAG,EAAEG,IAAI,GAAG,CAAC,CAAC,EAAEV,OAAO,GAAG,CAAC,CAAC,KAAK;EACzD,MAAMS,QAAQ,GAAG,MAAMb,SAAS,CAACkB,GAAG,CAACP,GAAG,EAAEG,IAAI,EAAE;IAAEV;EAAQ,CAAC,CAAC;EAC5D,OAAOS,QAAQ,CAACC,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMK,GAAG,GAAG,MAAAA,CAAOR,GAAG,EAAEP,OAAO,GAAG,CAAC,CAAC,KAAK;EAC9C,MAAMS,QAAQ,GAAG,MAAMb,SAAS,CAACoB,MAAM,CAACT,GAAG,EAAE;IAAEP;EAAQ,CAAC,CAAC;EACzD,OAAOS,QAAQ,CAACC,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMO,QAAQ,GAAG,MAAAA,CAAOV,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAER,OAAO,GAAG,CAAC,CAAC,KAAK;EAChE,MAAMK,WAAW,GAAGJ,cAAc,CAAC,CAAC;;EAEpC;EACA,IAAII,WAAW,EAAE;IACfL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,WAAW,EAAE;EACpD;EAEA,MAAMI,QAAQ,GAAG,MAAMb,SAAS,CAACU,GAAG,CAACC,GAAG,EAAE;IAAEC,MAAM;IAAER;EAAQ,CAAC,CAAC;EAC9D,OAAOS,QAAQ,CAACC,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMQ,SAAS,GAAG,MAAAA,CAAOX,GAAG,EAAEG,IAAI,GAAG,CAAC,CAAC,EAAEV,OAAO,GAAG,CAAC,CAAC,KAAK;EAC/D,MAAMK,WAAW,GAAGJ,cAAc,CAAC,CAAC;EAEpC,IAAII,WAAW,EAAE;IACfL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,WAAW,EAAE;EACpD;EAEAO,OAAO,CAACC,GAAG,CAACb,OAAO,CAAC;EAEpB,MAAMS,QAAQ,GAAG,MAAMb,SAAS,CAACe,IAAI,CAACJ,GAAG,EAAEG,IAAI,EAAE;IAAEV;EAAQ,CAAC,CAAC;EAC7D,OAAOS,QAAQ,CAACC,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMS,QAAQ,GAAG,MAAAA,CAAOZ,GAAG,EAAEG,IAAI,GAAG,CAAC,CAAC,EAAEV,OAAO,GAAG,CAAC,CAAC,KAAK;EAC9D,MAAMK,WAAW,GAAGJ,cAAc,CAAC,CAAC;;EAEpC;EACA,IAAII,WAAW,EAAE;IACfL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,WAAW,EAAE;EACpD;EAEA,MAAMI,QAAQ,GAAG,MAAMb,SAAS,CAACkB,GAAG,CAACP,GAAG,EAAEG,IAAI,EAAE;IAAEV;EAAQ,CAAC,CAAC;EAE5D,OAAOS,QAAQ,CAACC,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMU,QAAQ,GAAG,MAAAA,CAAOb,GAAG,EAAEP,OAAO,GAAG,CAAC,CAAC,KAAK;EACnD,MAAMK,WAAW,GAAGJ,cAAc,CAAC,CAAC;;EAEpC;EACA,IAAII,WAAW,EAAE;IACfL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,WAAW,EAAE;EACpD;EAEA,MAAMI,QAAQ,GAAG,MAAMb,SAAS,CAACoB,MAAM,CAACT,GAAG,EAAE;IAAEP;EAAQ,CAAC,CAAC;EACzD,OAAOS,QAAQ,CAACC,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMW,UAAU,GAAG,MAAAA,CAAOd,GAAG,EAAEP,OAAO,GAAG,CAAC,CAAC,KAAK;EACrD,MAAMK,WAAW,GAAGJ,cAAc,CAAC,CAAC;;EAEpC;EACA,IAAII,WAAW,EAAE;IACfL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,WAAW,EAAE;EACpD;EAEA,MAAMI,QAAQ,GAAG,MAAMb,SAAS,CAAC0B,KAAK,CAACf,GAAG,EAAE;IAAEP;EAAQ,CAAC,CAAC;EACxD,OAAOS,QAAQ,CAACC,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}