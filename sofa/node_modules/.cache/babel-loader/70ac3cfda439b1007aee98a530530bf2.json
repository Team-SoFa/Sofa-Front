{"ast":null,"code":"// BookmarkList.js\nimport React,{useState,useEffect}from\"react\";import LinkCard from\"./LinkCard.js\";import\"./ShowLinkCard.css\";//bookmarks : 북마크 데이터 배열(id, title, url 포함)\n//onDelete : 북마크 삭제 함수\n//북마크 목록 길이가 0보다 길면 렌더링\nconst ShowLinkCard=_ref=>{let{bookmarks,sideMenuOpen,bookmarkDetailOpen,onDelete,onEdit,onLinkCardClick,sortingOption,sortingDirOption}=_ref;const[gridColumns,setGridColumns]=useState(6);// 기본적으로 6개 열\n// 화면 크기와 메뉴 상태에 따라 그리드 열 개수를 동적으로 설정하는 함수\nconst calculateGridColumns=()=>{const windowWidth=window.innerWidth;let columns=6;// 기본 열 개수\n// 메뉴가 열렸을 경우 화면 길이를 빼고 계산\nif(sideMenuOpen&&bookmarkDetailOpen){columns=Math.floor((windowWidth-20*parseFloat(getComputedStyle(document.documentElement).fontSize))/200);// sideMenu와 bookmarkDetail이 열렸을 때\n}else if(sideMenuOpen||bookmarkDetailOpen){columns=Math.floor((windowWidth-10*parseFloat(getComputedStyle(document.documentElement).fontSize))/200);// 하나만 열렸을 때\n}else{columns=Math.floor(windowWidth/200);// 기본적으로 윈도우 창 크기에 맞춰\n}setGridColumns(columns);};// 화면 크기 변경 시 그리드 열 개수 재계산\nuseEffect(()=>{window.addEventListener(\"resize\",calculateGridColumns);calculateGridColumns();// 최초 렌더링 시 한 번 호출\n// 이벤트 리스너 정리\nreturn()=>{window.removeEventListener(\"resize\",calculateGridColumns);};},[sideMenuOpen,bookmarkDetailOpen]);// 메뉴 상태가 변경될 때마다 호출\n//Sorting\nconst sortBookmarks=(bookmarks,sortingOption,sortingDir)=>{let sorted=[...bookmarks];if(sortingOption===\"최근저장\"){sorted=sorted.sort((a,b)=>b.id-a.id);}else if(sortingOption===\"오래된저장\"){sorted=sorted.sort((a,b)=>a.id-b.id);}else if(sortingOption===\"이름순\"){sorted=sorted.sort((a,b)=>a.title.localeCompare(b.title));}if(sortingDir===\"내림차순\"){sorted=sorted.reverse();}return sorted;};const sortedBookmarks=sortBookmarks(bookmarks,sortingOption,sortingDirOption);return/*#__PURE__*/React.createElement(\"div\",{className:\"bookmark-grid\",style:{gridTemplateColumns:`repeat(${gridColumns}, 1fr)`}},sortedBookmarks.length>0?sortedBookmarks.map(bookmark=>/*#__PURE__*/React.createElement(LinkCard,{key:bookmark.id//리스트에서 고유 식별자 사용\n,bookmark:bookmark//각 북마크 데이터를 BookmarkItem에 전달\n,onDelete:onDelete//삭제 기능을 BookmarkItem에 전달\n,onEdit:onEdit,onClick:()=>{console.log(\"Card clicked:\",bookmark);onLinkCardClick(bookmark);// 안전하게 호출\n}})):/*#__PURE__*/React.createElement(\"p\",null,\"...\"));};export default ShowLinkCard;","map":{"version":3,"names":["React","useState","useEffect","LinkCard","ShowLinkCard","_ref","bookmarks","sideMenuOpen","bookmarkDetailOpen","onDelete","onEdit","onLinkCardClick","sortingOption","sortingDirOption","gridColumns","setGridColumns","calculateGridColumns","windowWidth","window","innerWidth","columns","Math","floor","parseFloat","getComputedStyle","document","documentElement","fontSize","addEventListener","removeEventListener","sortBookmarks","sortingDir","sorted","sort","a","b","id","title","localeCompare","reverse","sortedBookmarks","createElement","className","style","gridTemplateColumns","length","map","bookmark","key","onClick","console","log"],"sources":["/Users/mingmaengmung/Documents/GitHub/Sofa-Front/sofa/src/components/LinkCard/ShowLinkCard.js"],"sourcesContent":["// BookmarkList.js\n\nimport React, { useState, useEffect } from \"react\";\nimport LinkCard from \"./LinkCard.js\";\nimport \"./ShowLinkCard.css\";\n\n//bookmarks : 북마크 데이터 배열(id, title, url 포함)\n//onDelete : 북마크 삭제 함수\n//북마크 목록 길이가 0보다 길면 렌더링\nconst ShowLinkCard = ({\n  bookmarks,\n  sideMenuOpen,\n  bookmarkDetailOpen,\n  onDelete,\n  onEdit,\n  onLinkCardClick,\n  sortingOption,\n  sortingDirOption,\n}) => {\n  const [gridColumns, setGridColumns] = useState(6); // 기본적으로 6개 열\n  // 화면 크기와 메뉴 상태에 따라 그리드 열 개수를 동적으로 설정하는 함수\n  const calculateGridColumns = () => {\n    const windowWidth = window.innerWidth;\n    let columns = 6; // 기본 열 개수\n\n    // 메뉴가 열렸을 경우 화면 길이를 빼고 계산\n    if (sideMenuOpen && bookmarkDetailOpen) {\n      columns = Math.floor(\n        (windowWidth -\n          20 *\n            parseFloat(getComputedStyle(document.documentElement).fontSize)) /\n          200\n      ); // sideMenu와 bookmarkDetail이 열렸을 때\n    } else if (sideMenuOpen || bookmarkDetailOpen) {\n      columns = Math.floor(\n        (windowWidth -\n          10 *\n            parseFloat(getComputedStyle(document.documentElement).fontSize)) /\n          200\n      ); // 하나만 열렸을 때\n    } else {\n      columns = Math.floor(windowWidth / 200); // 기본적으로 윈도우 창 크기에 맞춰\n    }\n\n    setGridColumns(columns);\n  };\n\n  // 화면 크기 변경 시 그리드 열 개수 재계산\n  useEffect(() => {\n    window.addEventListener(\"resize\", calculateGridColumns);\n    calculateGridColumns(); // 최초 렌더링 시 한 번 호출\n\n    // 이벤트 리스너 정리\n    return () => {\n      window.removeEventListener(\"resize\", calculateGridColumns);\n    };\n  }, [sideMenuOpen, bookmarkDetailOpen]); // 메뉴 상태가 변경될 때마다 호출\n\n  //Sorting\n  const sortBookmarks = (bookmarks, sortingOption, sortingDir) => {\n    let sorted = [...bookmarks];\n\n    if (sortingOption === \"최근저장\") {\n      sorted = sorted.sort((a, b) => b.id - a.id);\n    } else if (sortingOption === \"오래된저장\") {\n      sorted = sorted.sort((a, b) => a.id - b.id);\n    } else if (sortingOption === \"이름순\") {\n      sorted = sorted.sort((a, b) => a.title.localeCompare(b.title));\n    }\n    if (sortingDir === \"내림차순\") {\n      sorted = sorted.reverse();\n    }\n    return sorted;\n  };\n  const sortedBookmarks = sortBookmarks(\n    bookmarks,\n    sortingOption,\n    sortingDirOption\n  );\n\n  return (\n    <div\n      className=\"bookmark-grid\"\n      style={{ gridTemplateColumns: `repeat(${gridColumns}, 1fr)` }}\n    >\n      {sortedBookmarks.length > 0 ? (\n        sortedBookmarks.map((bookmark) => (\n          <LinkCard\n            key={bookmark.id} //리스트에서 고유 식별자 사용\n            bookmark={bookmark} //각 북마크 데이터를 BookmarkItem에 전달\n            onDelete={onDelete} //삭제 기능을 BookmarkItem에 전달\n            onEdit={onEdit}\n            onClick={() => {\n              console.log(\"Card clicked:\", bookmark);\n              onLinkCardClick(bookmark); // 안전하게 호출\n            }}\n          />\n        ))\n      ) : (\n        <p>...</p>\n      )}\n    </div>\n  );\n};\n\nexport default ShowLinkCard;\n"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,QAAQ,KAAM,eAAe,CACpC,MAAO,oBAAoB,CAE3B;AACA;AACA;AACA,KAAM,CAAAC,YAAY,CAAGC,IAAA,EASf,IATgB,CACpBC,SAAS,CACTC,YAAY,CACZC,kBAAkB,CAClBC,QAAQ,CACRC,MAAM,CACNC,eAAe,CACfC,aAAa,CACbC,gBACF,CAAC,CAAAR,IAAA,CACC,KAAM,CAACS,WAAW,CAAEC,cAAc,CAAC,CAAGd,QAAQ,CAAC,CAAC,CAAC,CAAE;AACnD;AACA,KAAM,CAAAe,oBAAoB,CAAGA,CAAA,GAAM,CACjC,KAAM,CAAAC,WAAW,CAAGC,MAAM,CAACC,UAAU,CACrC,GAAI,CAAAC,OAAO,CAAG,CAAC,CAAE;AAEjB;AACA,GAAIb,YAAY,EAAIC,kBAAkB,CAAE,CACtCY,OAAO,CAAGC,IAAI,CAACC,KAAK,CAClB,CAACL,WAAW,CACV,EAAE,CACAM,UAAU,CAACC,gBAAgB,CAACC,QAAQ,CAACC,eAAe,CAAC,CAACC,QAAQ,CAAC,EACjE,GACJ,CAAC,CAAE;AACL,CAAC,IAAM,IAAIpB,YAAY,EAAIC,kBAAkB,CAAE,CAC7CY,OAAO,CAAGC,IAAI,CAACC,KAAK,CAClB,CAACL,WAAW,CACV,EAAE,CACAM,UAAU,CAACC,gBAAgB,CAACC,QAAQ,CAACC,eAAe,CAAC,CAACC,QAAQ,CAAC,EACjE,GACJ,CAAC,CAAE;AACL,CAAC,IAAM,CACLP,OAAO,CAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,CAAG,GAAG,CAAC,CAAE;AAC3C,CAEAF,cAAc,CAACK,OAAO,CAAC,CACzB,CAAC,CAED;AACAlB,SAAS,CAAC,IAAM,CACdgB,MAAM,CAACU,gBAAgB,CAAC,QAAQ,CAAEZ,oBAAoB,CAAC,CACvDA,oBAAoB,CAAC,CAAC,CAAE;AAExB;AACA,MAAO,IAAM,CACXE,MAAM,CAACW,mBAAmB,CAAC,QAAQ,CAAEb,oBAAoB,CAAC,CAC5D,CAAC,CACH,CAAC,CAAE,CAACT,YAAY,CAAEC,kBAAkB,CAAC,CAAC,CAAE;AAExC;AACA,KAAM,CAAAsB,aAAa,CAAGA,CAACxB,SAAS,CAAEM,aAAa,CAAEmB,UAAU,GAAK,CAC9D,GAAI,CAAAC,MAAM,CAAG,CAAC,GAAG1B,SAAS,CAAC,CAE3B,GAAIM,aAAa,GAAK,MAAM,CAAE,CAC5BoB,MAAM,CAAGA,MAAM,CAACC,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAACC,EAAE,CAAGF,CAAC,CAACE,EAAE,CAAC,CAC7C,CAAC,IAAM,IAAIxB,aAAa,GAAK,OAAO,CAAE,CACpCoB,MAAM,CAAGA,MAAM,CAACC,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAACE,EAAE,CAAGD,CAAC,CAACC,EAAE,CAAC,CAC7C,CAAC,IAAM,IAAIxB,aAAa,GAAK,KAAK,CAAE,CAClCoB,MAAM,CAAGA,MAAM,CAACC,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAACG,KAAK,CAACC,aAAa,CAACH,CAAC,CAACE,KAAK,CAAC,CAAC,CAChE,CACA,GAAIN,UAAU,GAAK,MAAM,CAAE,CACzBC,MAAM,CAAGA,MAAM,CAACO,OAAO,CAAC,CAAC,CAC3B,CACA,MAAO,CAAAP,MAAM,CACf,CAAC,CACD,KAAM,CAAAQ,eAAe,CAAGV,aAAa,CACnCxB,SAAS,CACTM,aAAa,CACbC,gBACF,CAAC,CAED,mBACEb,KAAA,CAAAyC,aAAA,QACEC,SAAS,CAAC,eAAe,CACzBC,KAAK,CAAE,CAAEC,mBAAmB,CAAE,UAAU9B,WAAW,QAAS,CAAE,EAE7D0B,eAAe,CAACK,MAAM,CAAG,CAAC,CACzBL,eAAe,CAACM,GAAG,CAAEC,QAAQ,eAC3B/C,KAAA,CAAAyC,aAAA,CAACtC,QAAQ,EACP6C,GAAG,CAAED,QAAQ,CAACX,EAAI;AAAA,CAClBW,QAAQ,CAAEA,QAAU;AAAA,CACpBtC,QAAQ,CAAEA,QAAU;AAAA,CACpBC,MAAM,CAAEA,MAAO,CACfuC,OAAO,CAAEA,CAAA,GAAM,CACbC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEJ,QAAQ,CAAC,CACtCpC,eAAe,CAACoC,QAAQ,CAAC,CAAE;AAC7B,CAAE,CACH,CACF,CAAC,cAEF/C,KAAA,CAAAyC,aAAA,UAAG,KAAM,CAER,CAAC,CAEV,CAAC,CAED,cAAe,CAAArC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}