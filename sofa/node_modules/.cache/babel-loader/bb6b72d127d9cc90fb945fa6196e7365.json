{"ast":null,"code":"// src/services/loginService.js\nimport apiClient from \"./apiClient\";\nexport const handleLoginResponse = response => {\n  const {\n    accessToken,\n    refreshToken,\n    tokenType,\n    tokenValue\n  } = response;\n  // Redux 상태에 토큰 저장\n  dispatch(setTokens(accessToken, refreshToken, tokenType, tokenValue));\n};\n\n// Google 로그인 URL을 얻는 API 호출\nexport const getGoogleLoginUrl = async (headers = {}) => {\n  try {\n    const url = await get('/login/oauth2/google', headers); // GET 요청 보내기\n    return url; // 로그인 URL 반환\n  } catch (error) {\n    console.error('Google 로그인 URL을 가져오는 데 실패했습니다:', error);\n    throw error; // 에러 발생 시 호출한 곳으로 에러 전달\n  }\n};\n\n// 임시 로그인 함수 (accessToken, refreshToken을 포함한 응답 반환)\nexport const tempLogin = async headers => {\n  try {\n    const response = await apiClient.post(\"/login/oauth2/signUpOrLogin\", {}, {\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Login failed:\", error);\n    throw error;\n  }\n};\n\n// 사용자 정보 업데이트 (PUT 요청 예시)\nexport const updateUserInfo = async (data, headers = {}) => {\n  try {\n    const response = await put('/user/update', data, headers); // PUT 요청 보내기 (사용자 정보 업데이트)\n    return response; // 업데이트된 사용자 정보 반환\n  } catch (error) {\n    console.error('사용자 정보 업데이트에 실패했습니다:', error);\n    throw error; // 에러 발생 시 호출한 곳으로 에러 전달\n  }\n};\n\n// 사용자 삭제 (DELETE 요청 예시)\nexport const deleteUser = async (userId, headers = {}) => {\n  try {\n    const response = await del(`/user/${userId}`, headers); // DELETE 요청 보내기 (사용자 삭제)\n    return response; // 삭제된 사용자 정보 반환\n  } catch (error) {\n    console.error('사용자 삭제에 실패했습니다:', error);\n    throw error; // 에러 발생 시 호출한 곳으로 에러 전달\n  }\n};","map":{"version":3,"names":["apiClient","handleLoginResponse","response","accessToken","refreshToken","tokenType","tokenValue","dispatch","setTokens","getGoogleLoginUrl","headers","url","get","error","console","tempLogin","post","data","updateUserInfo","put","deleteUser","userId","del"],"sources":["/Users/mingmaengmung/Documents/GitHub/Sofa-Front/sofa/src/services/loginService.js"],"sourcesContent":["// src/services/loginService.js\nimport apiClient from \"./apiClient\";\n\nexport const handleLoginResponse = (response) => {\n  const { accessToken, refreshToken, tokenType, tokenValue } = response;\n  // Redux 상태에 토큰 저장\n  dispatch(setTokens(accessToken, refreshToken, tokenType, tokenValue));\n};\n\n// Google 로그인 URL을 얻는 API 호출\nexport const getGoogleLoginUrl = async (headers = {}) => {\n  try {\n    const url = await get('/login/oauth2/google', headers); // GET 요청 보내기\n    return url; // 로그인 URL 반환\n  } catch (error) {\n    console.error('Google 로그인 URL을 가져오는 데 실패했습니다:', error);\n    throw error; // 에러 발생 시 호출한 곳으로 에러 전달\n  }\n};\n\n// 임시 로그인 함수 (accessToken, refreshToken을 포함한 응답 반환)\nexport const tempLogin = async (headers) => {\n  try {\n    const response = await apiClient.post(\"/login/oauth2/signUpOrLogin\", {}, { headers });\n    return response.data;\n  } catch (error) {\n    console.error(\"Login failed:\", error);\n    throw error;\n  }\n};\n\n// 사용자 정보 업데이트 (PUT 요청 예시)\nexport const updateUserInfo = async (data, headers = {}) => {\n  try {\n    const response = await put('/user/update', data, headers); // PUT 요청 보내기 (사용자 정보 업데이트)\n    return response; // 업데이트된 사용자 정보 반환\n  } catch (error) {\n    console.error('사용자 정보 업데이트에 실패했습니다:', error);\n    throw error; // 에러 발생 시 호출한 곳으로 에러 전달\n  }\n};\n\n// 사용자 삭제 (DELETE 요청 예시)\nexport const deleteUser = async (userId, headers = {}) => {\n  try {\n    const response = await del(`/user/${userId}`, headers); // DELETE 요청 보내기 (사용자 삭제)\n    return response; // 삭제된 사용자 정보 반환\n  } catch (error) {\n    console.error('사용자 삭제에 실패했습니다:', error);\n    throw error; // 에러 발생 시 호출한 곳으로 에러 전달\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,SAAS,MAAM,aAAa;AAEnC,OAAO,MAAMC,mBAAmB,GAAIC,QAAQ,IAAK;EAC/C,MAAM;IAAEC,WAAW;IAAEC,YAAY;IAAEC,SAAS;IAAEC;EAAW,CAAC,GAAGJ,QAAQ;EACrE;EACAK,QAAQ,CAACC,SAAS,CAACL,WAAW,EAAEC,YAAY,EAAEC,SAAS,EAAEC,UAAU,CAAC,CAAC;AACvE,CAAC;;AAED;AACA,OAAO,MAAMG,iBAAiB,GAAG,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;EACvD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,GAAG,CAAC,sBAAsB,EAAEF,OAAO,CAAC,CAAC,CAAC;IACxD,OAAOC,GAAG,CAAC,CAAC;EACd,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAME,SAAS,GAAG,MAAOL,OAAO,IAAK;EAC1C,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMF,SAAS,CAACgB,IAAI,CAAC,6BAA6B,EAAE,CAAC,CAAC,EAAE;MAAEN;IAAQ,CAAC,CAAC;IACrF,OAAOR,QAAQ,CAACe,IAAI;EACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,cAAc,GAAG,MAAAA,CAAOD,IAAI,EAAEP,OAAO,GAAG,CAAC,CAAC,KAAK;EAC1D,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMiB,GAAG,CAAC,cAAc,EAAEF,IAAI,EAAEP,OAAO,CAAC,CAAC,CAAC;IAC3D,OAAOR,QAAQ,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEX,OAAO,GAAG,CAAC,CAAC,KAAK;EACxD,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMoB,GAAG,CAAC,SAASD,MAAM,EAAE,EAAEX,OAAO,CAAC,CAAC,CAAC;IACxD,OAAOR,QAAQ,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}